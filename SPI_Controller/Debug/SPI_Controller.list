
SPI_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800234c  0800234c  0000334c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800235c  0800235c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800235c  0800235c  0000335c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002364  08002364  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002364  08002364  00003364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002368  08002368  00003368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800236c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002378  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002378  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005631  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001222  00000000  00000000  0000966d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  0000a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000045a  00000000  00000000  0000ae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f0e  00000000  00000000  0000b2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006dce  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083828  00000000  00000000  00026fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa7ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016c8  00000000  00000000  000aa814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000abedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002334 	.word	0x08002334

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002334 	.word	0x08002334

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 f9f1 	bl	80008b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f84f 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f8f1 	bl	80006b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d6:	f000 f8b7 	bl	8000648 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char data[5] = "";
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	2300      	movs	r3, #0
 80004e0:	723b      	strb	r3, [r7, #8]
  uint8_t len_req = 0x3;
 80004e2:	2303      	movs	r3, #3
 80004e4:	70fb      	strb	r3, [r7, #3]
  uint8_t data_req = 0x2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	72fb      	strb	r3, [r7, #11]
  uint8_t temp = 0x0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	72bb      	strb	r3, [r7, #10]
  //while( ( SPI1->SR & SPI_SR_BSY ) == 1 );
  //for(int i = 0; i < 10000000; i++) {};
  //(void)HAL_SPI_Transmit(&hspi1, &data_req, 1, 100000);
  //while( ( SPI1->SR & SPI_SR_BSY ) == 1 );

  SPI2->CR1 &= ~( 1 << SPI_CR1_SPE );
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <main+0x98>)
 80004f0:	4a1a      	ldr	r2, [pc, #104]	@ (800055c <main+0x98>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= ( 1 << SPI_CR1_BIDIOE );
 80004f6:	4b19      	ldr	r3, [pc, #100]	@ (800055c <main+0x98>)
 80004f8:	4a18      	ldr	r2, [pc, #96]	@ (800055c <main+0x98>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= ( 1 << SPI_CR1_SPE );
 80004fe:	4b17      	ldr	r3, [pc, #92]	@ (800055c <main+0x98>)
 8000500:	4a16      	ldr	r2, [pc, #88]	@ (800055c <main+0x98>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6013      	str	r3, [r2, #0]
  (void)HAL_SPI_Transmit(&hspi1, &len_req, 1, 100000);
 8000506:	1cf9      	adds	r1, r7, #3
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <main+0x9c>)
 800050a:	2201      	movs	r2, #1
 800050c:	4815      	ldr	r0, [pc, #84]	@ (8000564 <main+0xa0>)
 800050e:	f001 f998 	bl	8001842 <HAL_SPI_Transmit>

  SPI2->CR1 &= ~( 1 << SPI_CR1_SPE );
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <main+0x98>)
 8000514:	4a11      	ldr	r2, [pc, #68]	@ (800055c <main+0x98>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6013      	str	r3, [r2, #0]
  SPI2->CR1 &= ~( 1 << SPI_CR1_BIDIOE );
 800051a:	4b10      	ldr	r3, [pc, #64]	@ (800055c <main+0x98>)
 800051c:	4a0f      	ldr	r2, [pc, #60]	@ (800055c <main+0x98>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= ( 1 << SPI_CR1_SPE );
 8000522:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <main+0x98>)
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <main+0x98>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6013      	str	r3, [r2, #0]

  for(int i = 0; i < 10000000; i++) {};
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	e002      	b.n	8000536 <main+0x72>
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3301      	adds	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4a0b      	ldr	r2, [pc, #44]	@ (8000568 <main+0xa4>)
 800053a:	4293      	cmp	r3, r2
 800053c:	dbf8      	blt.n	8000530 <main+0x6c>
  (void)HAL_SPI_Receive(&hspi1, (uint8_t *)data, 5, 100000);
 800053e:	1d39      	adds	r1, r7, #4
 8000540:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <main+0x9c>)
 8000542:	2205      	movs	r2, #5
 8000544:	4807      	ldr	r0, [pc, #28]	@ (8000564 <main+0xa0>)
 8000546:	f001 fabf 	bl	8001ac8 <HAL_SPI_Receive>
  while( ( SPI1->SR & SPI_SR_BSY ) == 1 );
 800054a:	bf00      	nop
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <main+0xa8>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000554:	2b01      	cmp	r3, #1
 8000556:	d0f9      	beq.n	800054c <main+0x88>

  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x94>
 800055c:	40003800 	.word	0x40003800
 8000560:	000186a0 	.word	0x000186a0
 8000564:	20000028 	.word	0x20000028
 8000568:	00989680 	.word	0x00989680
 800056c:	40013000 	.word	0x40013000

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	@ 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f001 feac 	bl	80022dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	4a28      	ldr	r2, [pc, #160]	@ (8000640 <SystemClock_Config+0xd0>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005bc:	4a21      	ldr	r2, [pc, #132]	@ (8000644 <SystemClock_Config+0xd4>)
 80005be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e4:	2310      	movs	r3, #16
 80005e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f2:	2307      	movs	r3, #7
 80005f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fc34 	bl	8000e68 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000606:	f000 f871 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2102      	movs	r1, #2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fe96 	bl	8001358 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000632:	f000 f85b 	bl	80006ec <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	@ 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_SPI1_Init+0x68>)
 800064e:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <MX_SPI1_Init+0x6c>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_SPI1_Init+0x68>)
 8000654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800065a:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_SPI1_Init+0x68>)
 800065c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000660:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_SPI1_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_SPI1_Init+0x68>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_SPI1_Init+0x68>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_SPI1_Init+0x68>)
 8000676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800067a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_SPI1_Init+0x68>)
 800067e:	2238      	movs	r2, #56	@ 0x38
 8000680:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_SPI1_Init+0x68>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_SPI1_Init+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_SPI1_Init+0x68>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_SPI1_Init+0x68>)
 8000696:	220a      	movs	r2, #10
 8000698:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_SPI1_Init+0x68>)
 800069c:	f001 f848 	bl	8001730 <HAL_SPI_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80006a6:	f000 f821 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40013000 	.word	0x40013000

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_GPIO_Init+0x30>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a08      	ldr	r2, [pc, #32]	@ (80006e8 <MX_GPIO_Init+0x30>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_GPIO_Init+0x30>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000706:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <HAL_MspInit+0x4c>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070c:	6453      	str	r3, [r2, #68]	@ 0x44
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000722:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <HAL_MspInit+0x4c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	@ 0x40
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000736:	2007      	movs	r0, #7
 8000738:	f000 f9de 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800

08000748 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a19      	ldr	r2, [pc, #100]	@ (80007cc <HAL_SPI_MspInit+0x84>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d12b      	bne.n	80007c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <HAL_SPI_MspInit+0x88>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000772:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <HAL_SPI_MspInit+0x88>)
 8000774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000778:	6453      	str	r3, [r2, #68]	@ 0x44
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_SPI_MspInit+0x88>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <HAL_SPI_MspInit+0x88>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <HAL_SPI_MspInit+0x88>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <HAL_SPI_MspInit+0x88>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007a2:	23a0      	movs	r3, #160	@ 0xa0
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b2:	2305      	movs	r3, #5
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <HAL_SPI_MspInit+0x8c>)
 80007be:	f000 f9cf 	bl	8000b60 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40013000 	.word	0x40013000
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <NMI_Handler+0x4>

080007e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <MemManage_Handler+0x4>

080007f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <UsageFault_Handler+0x4>

08000800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f891 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <SystemInit+0x20>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <SystemInit+0x20>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800085c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000860:	f7ff ffea 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800088a:	f001 fd2f 	bl	80022ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088e:	f7ff fe19 	bl	80004c4 <main>
  bx  lr    
 8000892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000894:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a0:	0800236c 	.word	0x0800236c
  ldr r2, =_sbss
 80008a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a8:	20000084 	.word	0x20000084

080008ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>
	...

080008b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_Init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <HAL_Init+0x40>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c0:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <HAL_Init+0x40>)
 80008c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_Init+0x40>)
 80008d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f90d 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff ff08 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023c00 	.word	0x40023c00

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f917 	bl	8000b46 <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 f8ed 	bl	8000b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x20>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_IncTick+0x24>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_IncTick+0x24>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008
 8000978:	20000080 	.word	0x20000080

0800097c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000080 	.word	0x20000080

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	@ (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	@ 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff47 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff5c 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffb0 	bl	8000ab4 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	@ 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	e159      	b.n	8000e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f040 8148 	bne.w	8000e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d005      	beq.n	8000bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d130      	bne.n	8000c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be8:	2201      	movs	r2, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	f003 0201 	and.w	r2, r3, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d017      	beq.n	8000c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d123      	bne.n	8000ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0203 	and.w	r2, r3, #3
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f000 80a2 	beq.w	8000e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b57      	ldr	r3, [pc, #348]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	4a56      	ldr	r2, [pc, #344]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf6:	4b54      	ldr	r3, [pc, #336]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d02:	4a52      	ldr	r2, [pc, #328]	@ (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a49      	ldr	r2, [pc, #292]	@ (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d019      	beq.n	8000d62 <HAL_GPIO_Init+0x202>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a48      	ldr	r2, [pc, #288]	@ (8000e54 <HAL_GPIO_Init+0x2f4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d013      	beq.n	8000d5e <HAL_GPIO_Init+0x1fe>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a47      	ldr	r2, [pc, #284]	@ (8000e58 <HAL_GPIO_Init+0x2f8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d00d      	beq.n	8000d5a <HAL_GPIO_Init+0x1fa>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a46      	ldr	r2, [pc, #280]	@ (8000e5c <HAL_GPIO_Init+0x2fc>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d007      	beq.n	8000d56 <HAL_GPIO_Init+0x1f6>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a45      	ldr	r2, [pc, #276]	@ (8000e60 <HAL_GPIO_Init+0x300>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_GPIO_Init+0x1f2>
 8000d4e:	2304      	movs	r3, #4
 8000d50:	e008      	b.n	8000d64 <HAL_GPIO_Init+0x204>
 8000d52:	2307      	movs	r3, #7
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x204>
 8000d56:	2303      	movs	r3, #3
 8000d58:	e004      	b.n	8000d64 <HAL_GPIO_Init+0x204>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_Init+0x204>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_GPIO_Init+0x204>
 8000d62:	2300      	movs	r3, #0
 8000d64:	69fa      	ldr	r2, [r7, #28]
 8000d66:	f002 0203 	and.w	r2, r2, #3
 8000d6a:	0092      	lsls	r2, r2, #2
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d74:	4935      	ldr	r1, [pc, #212]	@ (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d82:	4b38      	ldr	r3, [pc, #224]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000da6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dac:	4b2d      	ldr	r3, [pc, #180]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd0:	4a24      	ldr	r2, [pc, #144]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd6:	4b23      	ldr	r3, [pc, #140]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e24:	4a0f      	ldr	r2, [pc, #60]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	f67f aea2 	bls.w	8000b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3724      	adds	r7, #36	@ 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40013800 	.word	0x40013800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40013c00 	.word	0x40013c00

08000e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e267      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d075      	beq.n	8000f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e86:	4b88      	ldr	r3, [pc, #544]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d00c      	beq.n	8000eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e92:	4b85      	ldr	r3, [pc, #532]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d112      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e9e:	4b82      	ldr	r3, [pc, #520]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000eaa:	d10b      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eac:	4b7e      	ldr	r3, [pc, #504]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d05b      	beq.n	8000f70 <HAL_RCC_OscConfig+0x108>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d157      	bne.n	8000f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e242      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ecc:	d106      	bne.n	8000edc <HAL_RCC_OscConfig+0x74>
 8000ece:	4b76      	ldr	r3, [pc, #472]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a75      	ldr	r2, [pc, #468]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e01d      	b.n	8000f18 <HAL_RCC_OscConfig+0xb0>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ee4:	d10c      	bne.n	8000f00 <HAL_RCC_OscConfig+0x98>
 8000ee6:	4b70      	ldr	r3, [pc, #448]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a6f      	ldr	r2, [pc, #444]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a6c      	ldr	r2, [pc, #432]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e00b      	b.n	8000f18 <HAL_RCC_OscConfig+0xb0>
 8000f00:	4b69      	ldr	r3, [pc, #420]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a68      	ldr	r2, [pc, #416]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b66      	ldr	r3, [pc, #408]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a65      	ldr	r2, [pc, #404]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d013      	beq.n	8000f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fd2c 	bl	800097c <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fd28 	bl	800097c <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	@ 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e207      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f0      	beq.n	8000f28 <HAL_RCC_OscConfig+0xc0>
 8000f46:	e014      	b.n	8000f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fd18 	bl	800097c <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fd14 	bl	800097c <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b64      	cmp	r3, #100	@ 0x64
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e1f3      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f62:	4b51      	ldr	r3, [pc, #324]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0xe8>
 8000f6e:	e000      	b.n	8000f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d063      	beq.n	8001046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00b      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f8a:	4b47      	ldr	r3, [pc, #284]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d11c      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f96:	4b44      	ldr	r3, [pc, #272]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d116      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa2:	4b41      	ldr	r3, [pc, #260]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <HAL_RCC_OscConfig+0x152>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d001      	beq.n	8000fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e1c7      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fba:	4b3b      	ldr	r3, [pc, #236]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4937      	ldr	r1, [pc, #220]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	e03a      	b.n	8001046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d020      	beq.n	800101a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd8:	4b34      	ldr	r3, [pc, #208]	@ (80010ac <HAL_RCC_OscConfig+0x244>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fde:	f7ff fccd 	bl	800097c <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe6:	f7ff fcc9 	bl	800097c <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e1a8      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001004:	4b28      	ldr	r3, [pc, #160]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	4925      	ldr	r1, [pc, #148]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 8001014:	4313      	orrs	r3, r2
 8001016:	600b      	str	r3, [r1, #0]
 8001018:	e015      	b.n	8001046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <HAL_RCC_OscConfig+0x244>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001020:	f7ff fcac 	bl	800097c <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001028:	f7ff fca8 	bl	800097c <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e187      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103a:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	2b00      	cmp	r3, #0
 8001050:	d036      	beq.n	80010c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d016      	beq.n	8001088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_RCC_OscConfig+0x248>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001060:	f7ff fc8c 	bl	800097c <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001068:	f7ff fc88 	bl	800097c <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e167      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_RCC_OscConfig+0x240>)
 800107c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f0      	beq.n	8001068 <HAL_RCC_OscConfig+0x200>
 8001086:	e01b      	b.n	80010c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_RCC_OscConfig+0x248>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108e:	f7ff fc75 	bl	800097c <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001094:	e00e      	b.n	80010b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001096:	f7ff fc71 	bl	800097c <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d907      	bls.n	80010b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e150      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
 80010a8:	40023800 	.word	0x40023800
 80010ac:	42470000 	.word	0x42470000
 80010b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b4:	4b88      	ldr	r3, [pc, #544]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80010b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1ea      	bne.n	8001096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8097 	beq.w	80011fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d2:	4b81      	ldr	r3, [pc, #516]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b7d      	ldr	r3, [pc, #500]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	4a7c      	ldr	r2, [pc, #496]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ee:	4b7a      	ldr	r3, [pc, #488]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010fa:	2301      	movs	r3, #1
 80010fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fe:	4b77      	ldr	r3, [pc, #476]	@ (80012dc <HAL_RCC_OscConfig+0x474>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001106:	2b00      	cmp	r3, #0
 8001108:	d118      	bne.n	800113c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800110a:	4b74      	ldr	r3, [pc, #464]	@ (80012dc <HAL_RCC_OscConfig+0x474>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a73      	ldr	r2, [pc, #460]	@ (80012dc <HAL_RCC_OscConfig+0x474>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001116:	f7ff fc31 	bl	800097c <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111e:	f7ff fc2d 	bl	800097c <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e10c      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001130:	4b6a      	ldr	r3, [pc, #424]	@ (80012dc <HAL_RCC_OscConfig+0x474>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x2ea>
 8001144:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 8001146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001148:	4a63      	ldr	r2, [pc, #396]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001150:	e01c      	b.n	800118c <HAL_RCC_OscConfig+0x324>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b05      	cmp	r3, #5
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x30c>
 800115a:	4b5f      	ldr	r3, [pc, #380]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 800115c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800115e:	4a5e      	ldr	r2, [pc, #376]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6713      	str	r3, [r2, #112]	@ 0x70
 8001166:	4b5c      	ldr	r3, [pc, #368]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 8001168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800116a:	4a5b      	ldr	r2, [pc, #364]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6713      	str	r3, [r2, #112]	@ 0x70
 8001172:	e00b      	b.n	800118c <HAL_RCC_OscConfig+0x324>
 8001174:	4b58      	ldr	r3, [pc, #352]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 8001176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001178:	4a57      	ldr	r2, [pc, #348]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001180:	4b55      	ldr	r3, [pc, #340]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 8001182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001184:	4a54      	ldr	r2, [pc, #336]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 8001186:	f023 0304 	bic.w	r3, r3, #4
 800118a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d015      	beq.n	80011c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001194:	f7ff fbf2 	bl	800097c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119a:	e00a      	b.n	80011b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff fbee 	bl	800097c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e0cb      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b2:	4b49      	ldr	r3, [pc, #292]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80011b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0ee      	beq.n	800119c <HAL_RCC_OscConfig+0x334>
 80011be:	e014      	b.n	80011ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fbdc 	bl	800097c <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c6:	e00a      	b.n	80011de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011c8:	f7ff fbd8 	bl	800097c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e0b5      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011de:	4b3e      	ldr	r3, [pc, #248]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80011e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1ee      	bne.n	80011c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f0:	4b39      	ldr	r3, [pc, #228]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	4a38      	ldr	r2, [pc, #224]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80011f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80a1 	beq.w	8001348 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001206:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b08      	cmp	r3, #8
 8001210:	d05c      	beq.n	80012cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d141      	bne.n	800129e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <HAL_RCC_OscConfig+0x478>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fbac 	bl	800097c <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001228:	f7ff fba8 	bl	800097c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e087      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800123a:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69da      	ldr	r2, [r3, #28]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001254:	019b      	lsls	r3, r3, #6
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125c:	085b      	lsrs	r3, r3, #1
 800125e:	3b01      	subs	r3, #1
 8001260:	041b      	lsls	r3, r3, #16
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001268:	061b      	lsls	r3, r3, #24
 800126a:	491b      	ldr	r1, [pc, #108]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_RCC_OscConfig+0x478>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fb81 	bl	800097c <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fb7d 	bl	800097c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e05c      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x416>
 800129c:	e054      	b.n	8001348 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <HAL_RCC_OscConfig+0x478>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fb6a 	bl	800097c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ac:	f7ff fb66 	bl	800097c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e045      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_RCC_OscConfig+0x470>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x444>
 80012ca:	e03d      	b.n	8001348 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d107      	bne.n	80012e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e038      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000
 80012e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x4ec>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d028      	beq.n	8001344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d121      	bne.n	8001344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	429a      	cmp	r2, r3
 800130c:	d11a      	bne.n	8001344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001314:	4013      	ands	r3, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800131a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800131c:	4293      	cmp	r3, r2
 800131e:	d111      	bne.n	8001344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	3b01      	subs	r3, #1
 800132e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001330:	429a      	cmp	r2, r3
 8001332:	d107      	bne.n	8001344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0cc      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800136c:	4b68      	ldr	r3, [pc, #416]	@ (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d90c      	bls.n	8001394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b65      	ldr	r3, [pc, #404]	@ (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b63      	ldr	r3, [pc, #396]	@ (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0b8      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ac:	4b59      	ldr	r3, [pc, #356]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4a58      	ldr	r2, [pc, #352]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c4:	4b53      	ldr	r3, [pc, #332]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a52      	ldr	r2, [pc, #328]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d0:	4b50      	ldr	r3, [pc, #320]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	494d      	ldr	r1, [pc, #308]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d044      	beq.n	8001478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	4b47      	ldr	r3, [pc, #284]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d119      	bne.n	8001436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e07f      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d003      	beq.n	8001416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001412:	2b03      	cmp	r3, #3
 8001414:	d107      	bne.n	8001426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001416:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e06f      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	4b3b      	ldr	r3, [pc, #236]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e067      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001436:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f023 0203 	bic.w	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4934      	ldr	r1, [pc, #208]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	4313      	orrs	r3, r2
 8001446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001448:	f7ff fa98 	bl	800097c <HAL_GetTick>
 800144c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	e00a      	b.n	8001466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001450:	f7ff fa94 	bl	800097c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e04f      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 020c 	and.w	r2, r3, #12
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	429a      	cmp	r2, r3
 8001476:	d1eb      	bne.n	8001450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001478:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d20c      	bcs.n	80014a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e032      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4916      	ldr	r1, [pc, #88]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d009      	beq.n	80014de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	490e      	ldr	r1, [pc, #56]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014de:	f000 f821 	bl	8001524 <HAL_RCC_GetSysClockFreq>
 80014e2:	4602      	mov	r2, r0
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	490a      	ldr	r1, [pc, #40]	@ (8001518 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	5ccb      	ldrb	r3, [r1, r3]
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	4a09      	ldr	r2, [pc, #36]	@ (800151c <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <HAL_RCC_ClockConfig+0x1c8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f9f8 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023c00 	.word	0x40023c00
 8001514:	40023800 	.word	0x40023800
 8001518:	0800234c 	.word	0x0800234c
 800151c:	20000000 	.word	0x20000000
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001528:	b094      	sub	sp, #80	@ 0x50
 800152a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001530:	2300      	movs	r3, #0
 8001532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001534:	2300      	movs	r3, #0
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800153c:	4b79      	ldr	r3, [pc, #484]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x200>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b08      	cmp	r3, #8
 8001546:	d00d      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x40>
 8001548:	2b08      	cmp	r3, #8
 800154a:	f200 80e1 	bhi.w	8001710 <HAL_RCC_GetSysClockFreq+0x1ec>
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <HAL_RCC_GetSysClockFreq+0x34>
 8001552:	2b04      	cmp	r3, #4
 8001554:	d003      	beq.n	800155e <HAL_RCC_GetSysClockFreq+0x3a>
 8001556:	e0db      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001558:	4b73      	ldr	r3, [pc, #460]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x204>)
 800155a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800155c:	e0db      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800155e:	4b73      	ldr	r3, [pc, #460]	@ (800172c <HAL_RCC_GetSysClockFreq+0x208>)
 8001560:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001562:	e0d8      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001564:	4b6f      	ldr	r3, [pc, #444]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x200>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800156c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800156e:	4b6d      	ldr	r3, [pc, #436]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x200>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d063      	beq.n	8001642 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800157a:	4b6a      	ldr	r3, [pc, #424]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x200>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	099b      	lsrs	r3, r3, #6
 8001580:	2200      	movs	r2, #0
 8001582:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001584:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800158c:	633b      	str	r3, [r7, #48]	@ 0x30
 800158e:	2300      	movs	r3, #0
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
 8001592:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001596:	4622      	mov	r2, r4
 8001598:	462b      	mov	r3, r5
 800159a:	f04f 0000 	mov.w	r0, #0
 800159e:	f04f 0100 	mov.w	r1, #0
 80015a2:	0159      	lsls	r1, r3, #5
 80015a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015a8:	0150      	lsls	r0, r2, #5
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4621      	mov	r1, r4
 80015b0:	1a51      	subs	r1, r2, r1
 80015b2:	6139      	str	r1, [r7, #16]
 80015b4:	4629      	mov	r1, r5
 80015b6:	eb63 0301 	sbc.w	r3, r3, r1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80015c8:	4659      	mov	r1, fp
 80015ca:	018b      	lsls	r3, r1, #6
 80015cc:	4651      	mov	r1, sl
 80015ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015d2:	4651      	mov	r1, sl
 80015d4:	018a      	lsls	r2, r1, #6
 80015d6:	4651      	mov	r1, sl
 80015d8:	ebb2 0801 	subs.w	r8, r2, r1
 80015dc:	4659      	mov	r1, fp
 80015de:	eb63 0901 	sbc.w	r9, r3, r1
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015f6:	4690      	mov	r8, r2
 80015f8:	4699      	mov	r9, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	eb18 0303 	adds.w	r3, r8, r3
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	462b      	mov	r3, r5
 8001604:	eb49 0303 	adc.w	r3, r9, r3
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001616:	4629      	mov	r1, r5
 8001618:	024b      	lsls	r3, r1, #9
 800161a:	4621      	mov	r1, r4
 800161c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001620:	4621      	mov	r1, r4
 8001622:	024a      	lsls	r2, r1, #9
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800162a:	2200      	movs	r2, #0
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800162e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001630:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001634:	f7fe fdce 	bl	80001d4 <__aeabi_uldivmod>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4613      	mov	r3, r2
 800163e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001640:	e058      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001642:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x200>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	099b      	lsrs	r3, r3, #6
 8001648:	2200      	movs	r2, #0
 800164a:	4618      	mov	r0, r3
 800164c:	4611      	mov	r1, r2
 800164e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
 8001658:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800165c:	4642      	mov	r2, r8
 800165e:	464b      	mov	r3, r9
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	0159      	lsls	r1, r3, #5
 800166a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800166e:	0150      	lsls	r0, r2, #5
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4641      	mov	r1, r8
 8001676:	ebb2 0a01 	subs.w	sl, r2, r1
 800167a:	4649      	mov	r1, r9
 800167c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800168c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001690:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001694:	ebb2 040a 	subs.w	r4, r2, sl
 8001698:	eb63 050b 	sbc.w	r5, r3, fp
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	00eb      	lsls	r3, r5, #3
 80016a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016aa:	00e2      	lsls	r2, r4, #3
 80016ac:	4614      	mov	r4, r2
 80016ae:	461d      	mov	r5, r3
 80016b0:	4643      	mov	r3, r8
 80016b2:	18e3      	adds	r3, r4, r3
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	464b      	mov	r3, r9
 80016b8:	eb45 0303 	adc.w	r3, r5, r3
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016ca:	4629      	mov	r1, r5
 80016cc:	028b      	lsls	r3, r1, #10
 80016ce:	4621      	mov	r1, r4
 80016d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016d4:	4621      	mov	r1, r4
 80016d6:	028a      	lsls	r2, r1, #10
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016de:	2200      	movs	r2, #0
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	61fa      	str	r2, [r7, #28]
 80016e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016e8:	f7fe fd74 	bl	80001d4 <__aeabi_uldivmod>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4613      	mov	r3, r2
 80016f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x200>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	3301      	adds	r3, #1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001704:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800170e:	e002      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x204>)
 8001712:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001718:	4618      	mov	r0, r3
 800171a:	3750      	adds	r7, #80	@ 0x50
 800171c:	46bd      	mov	sp, r7
 800171e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	00f42400 	.word	0x00f42400
 800172c:	007a1200 	.word	0x007a1200

08001730 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e07b      	b.n	800183a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001752:	d009      	beq.n	8001768 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
 800175a:	e005      	b.n	8001768 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d106      	bne.n	8001788 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe ffe0 	bl	8000748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800179e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ec:	ea42 0103 	orr.w	r1, r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	f003 0104 	and.w	r1, r3, #4
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	f003 0210 	and.w	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001828:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b088      	sub	sp, #32
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4613      	mov	r3, r2
 8001850:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_SPI_Transmit+0x22>
 8001860:	2302      	movs	r3, #2
 8001862:	e12d      	b.n	8001ac0 <HAL_SPI_Transmit+0x27e>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800186c:	f7ff f886 	bl	800097c <HAL_GetTick>
 8001870:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d002      	beq.n	8001888 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001882:	2302      	movs	r3, #2
 8001884:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001886:	e116      	b.n	8001ab6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_SPI_Transmit+0x52>
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001898:	e10d      	b.n	8001ab6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2203      	movs	r2, #3
 800189e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	88fa      	ldrh	r2, [r7, #6]
 80018b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018e0:	d10f      	bne.n	8001902 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001900:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190c:	2b40      	cmp	r3, #64	@ 0x40
 800190e:	d007      	beq.n	8001920 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800191e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001928:	d14f      	bne.n	80019ca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_SPI_Transmit+0xf6>
 8001932:	8afb      	ldrh	r3, [r7, #22]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d142      	bne.n	80019be <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	881a      	ldrh	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	1c9a      	adds	r2, r3, #2
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001952:	b29b      	uxth	r3, r3
 8001954:	3b01      	subs	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800195c:	e02f      	b.n	80019be <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b02      	cmp	r3, #2
 800196a:	d112      	bne.n	8001992 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197c:	1c9a      	adds	r2, r3, #2
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001986:	b29b      	uxth	r3, r3
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001990:	e015      	b.n	80019be <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001992:	f7fe fff3 	bl	800097c <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d803      	bhi.n	80019aa <HAL_SPI_Transmit+0x168>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d102      	bne.n	80019b0 <HAL_SPI_Transmit+0x16e>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d106      	bne.n	80019be <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80019bc:	e07b      	b.n	8001ab6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ca      	bne.n	800195e <HAL_SPI_Transmit+0x11c>
 80019c8:	e050      	b.n	8001a6c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_SPI_Transmit+0x196>
 80019d2:	8afb      	ldrh	r3, [r7, #22]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d144      	bne.n	8001a62 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	330c      	adds	r3, #12
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80019fe:	e030      	b.n	8001a62 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d113      	bne.n	8001a36 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	330c      	adds	r3, #12
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a34:	e015      	b.n	8001a62 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a36:	f7fe ffa1 	bl	800097c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d803      	bhi.n	8001a4e <HAL_SPI_Transmit+0x20c>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d102      	bne.n	8001a54 <HAL_SPI_Transmit+0x212>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d106      	bne.n	8001a62 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001a60:	e029      	b.n	8001ab6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1c9      	bne.n	8001a00 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	6839      	ldr	r1, [r7, #0]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fbdf 	bl	8002234 <SPI_EndRxTxTransaction>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10a      	bne.n	8001aa0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	77fb      	strb	r3, [r7, #31]
 8001aac:	e003      	b.n	8001ab6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d002      	beq.n	8001aee <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001aec:	e0fb      	b.n	8001ce6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001af6:	d112      	bne.n	8001b1e <HAL_SPI_Receive+0x56>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10e      	bne.n	8001b1e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2204      	movs	r2, #4
 8001b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001b08:	88fa      	ldrh	r2, [r7, #6]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f8ef 	bl	8001cf8 <HAL_SPI_TransmitReceive>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	e0e8      	b.n	8001cf0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_SPI_Receive+0x64>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e0e1      	b.n	8001cf0 <HAL_SPI_Receive+0x228>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b34:	f7fe ff22 	bl	800097c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_SPI_Receive+0x7e>
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b4a:	e0cc      	b.n	8001ce6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	88fa      	ldrh	r2, [r7, #6]
 8001b64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b92:	d10f      	bne.n	8001bb4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ba2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bbe:	2b40      	cmp	r3, #64	@ 0x40
 8001bc0:	d007      	beq.n	8001bd2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d16a      	bne.n	8001cb0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001bda:	e032      	b.n	8001c42 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d115      	bne.n	8001c16 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f103 020c 	add.w	r2, r3, #12
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf6:	7812      	ldrb	r2, [r2, #0]
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c14:	e015      	b.n	8001c42 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c16:	f7fe feb1 	bl	800097c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d803      	bhi.n	8001c2e <HAL_SPI_Receive+0x166>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d102      	bne.n	8001c34 <HAL_SPI_Receive+0x16c>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d106      	bne.n	8001c42 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001c40:	e051      	b.n	8001ce6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1c7      	bne.n	8001bdc <HAL_SPI_Receive+0x114>
 8001c4c:	e035      	b.n	8001cba <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d113      	bne.n	8001c84 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c66:	b292      	uxth	r2, r2
 8001c68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6e:	1c9a      	adds	r2, r3, #2
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c82:	e015      	b.n	8001cb0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c84:	f7fe fe7a 	bl	800097c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d803      	bhi.n	8001c9c <HAL_SPI_Receive+0x1d4>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9a:	d102      	bne.n	8001ca2 <HAL_SPI_Receive+0x1da>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001cae:	e01a      	b.n	8001ce6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1c9      	bne.n	8001c4e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	6839      	ldr	r1, [r7, #0]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fa52 	bl	8002168 <SPI_EndRxTransaction>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	75fb      	strb	r3, [r7, #23]
 8001cdc:	e003      	b.n	8001ce6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	@ 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d06:	2301      	movs	r3, #1
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_SPI_TransmitReceive+0x26>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e198      	b.n	8002050 <HAL_SPI_TransmitReceive+0x358>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d26:	f7fe fe29 	bl	800097c <HAL_GetTick>
 8001d2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d00f      	beq.n	8001d68 <HAL_SPI_TransmitReceive+0x70>
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d4e:	d107      	bne.n	8001d60 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <HAL_SPI_TransmitReceive+0x68>
 8001d58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d003      	beq.n	8001d68 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
 8001d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001d66:	e16d      	b.n	8002044 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_SPI_TransmitReceive+0x82>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_SPI_TransmitReceive+0x82>
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d103      	bne.n	8001d82 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001d80:	e160      	b.n	8002044 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d003      	beq.n	8001d96 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2205      	movs	r2, #5
 8001d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	887a      	ldrh	r2, [r7, #2]
 8001dbe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd6:	2b40      	cmp	r3, #64	@ 0x40
 8001dd8:	d007      	beq.n	8001dea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001df2:	d17c      	bne.n	8001eee <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_SPI_TransmitReceive+0x10a>
 8001dfc:	8b7b      	ldrh	r3, [r7, #26]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d16a      	bne.n	8001ed8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	881a      	ldrh	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	1c9a      	adds	r2, r3, #2
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e26:	e057      	b.n	8001ed8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d11b      	bne.n	8001e6e <HAL_SPI_TransmitReceive+0x176>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d016      	beq.n	8001e6e <HAL_SPI_TransmitReceive+0x176>
 8001e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d113      	bne.n	8001e6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	881a      	ldrh	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	1c9a      	adds	r2, r3, #2
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d119      	bne.n	8001eb0 <HAL_SPI_TransmitReceive+0x1b8>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d014      	beq.n	8001eb0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e90:	b292      	uxth	r2, r2
 8001e92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e98:	1c9a      	adds	r2, r3, #2
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001eac:	2301      	movs	r3, #1
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001eb0:	f7fe fd64 	bl	800097c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d80b      	bhi.n	8001ed8 <HAL_SPI_TransmitReceive+0x1e0>
 8001ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec6:	d007      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8001ed6:	e0b5      	b.n	8002044 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1a2      	bne.n	8001e28 <HAL_SPI_TransmitReceive+0x130>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d19d      	bne.n	8001e28 <HAL_SPI_TransmitReceive+0x130>
 8001eec:	e080      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_SPI_TransmitReceive+0x204>
 8001ef6:	8b7b      	ldrh	r3, [r7, #26]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d16f      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	330c      	adds	r3, #12
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f22:	e05b      	b.n	8001fdc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d11c      	bne.n	8001f6c <HAL_SPI_TransmitReceive+0x274>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d017      	beq.n	8001f6c <HAL_SPI_TransmitReceive+0x274>
 8001f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d114      	bne.n	8001f6c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	330c      	adds	r3, #12
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d119      	bne.n	8001fae <HAL_SPI_TransmitReceive+0x2b6>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d014      	beq.n	8001fae <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001faa:	2301      	movs	r3, #1
 8001fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001fae:	f7fe fce5 	bl	800097c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d803      	bhi.n	8001fc6 <HAL_SPI_TransmitReceive+0x2ce>
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d102      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x2d4>
 8001fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d107      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8001fda:	e033      	b.n	8002044 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d19e      	bne.n	8001f24 <HAL_SPI_TransmitReceive+0x22c>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d199      	bne.n	8001f24 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f91d 	bl	8002234 <SPI_EndRxTxTransaction>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2220      	movs	r2, #32
 800200a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800200c:	e01a      	b.n	8002044 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800203a:	e003      	b.n	8002044 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800204c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002050:	4618      	mov	r0, r3
 8002052:	3730      	adds	r7, #48	@ 0x30
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002068:	f7fe fc88 	bl	800097c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002078:	f7fe fc80 	bl	800097c <HAL_GetTick>
 800207c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800207e:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	015b      	lsls	r3, r3, #5
 8002084:	0d1b      	lsrs	r3, r3, #20
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800208e:	e054      	b.n	800213a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d050      	beq.n	800213a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002098:	f7fe fc70 	bl	800097c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d902      	bls.n	80020ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d13d      	bne.n	800212a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80020bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020c6:	d111      	bne.n	80020ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020d0:	d004      	beq.n	80020dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020da:	d107      	bne.n	80020ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020f4:	d10f      	bne.n	8002116 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e017      	b.n	800215a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3b01      	subs	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4013      	ands	r3, r2
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	429a      	cmp	r2, r3
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	429a      	cmp	r2, r3
 8002156:	d19b      	bne.n	8002090 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000

08002168 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800217c:	d111      	bne.n	80021a2 <SPI_EndRxTransaction+0x3a>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002186:	d004      	beq.n	8002192 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002190:	d107      	bne.n	80021a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021aa:	d12a      	bne.n	8002202 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b4:	d012      	beq.n	80021dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2200      	movs	r2, #0
 80021be:	2180      	movs	r1, #128	@ 0x80
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff ff49 	bl	8002058 <SPI_WaitFlagStateUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d02d      	beq.n	8002228 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e026      	b.n	800222a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2200      	movs	r2, #0
 80021e4:	2101      	movs	r1, #1
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff ff36 	bl	8002058 <SPI_WaitFlagStateUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01a      	beq.n	8002228 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f6:	f043 0220 	orr.w	r2, r3, #32
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e013      	b.n	800222a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2200      	movs	r2, #0
 800220a:	2101      	movs	r1, #1
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f7ff ff23 	bl	8002058 <SPI_WaitFlagStateUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e000      	b.n	800222a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2201      	movs	r2, #1
 8002248:	2102      	movs	r1, #2
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f7ff ff04 	bl	8002058 <SPI_WaitFlagStateUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225a:	f043 0220 	orr.w	r2, r3, #32
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e032      	b.n	80022cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <SPI_EndRxTxTransaction+0xa0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1b      	ldr	r2, [pc, #108]	@ (80022d8 <SPI_EndRxTxTransaction+0xa4>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	0d5b      	lsrs	r3, r3, #21
 8002272:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002284:	d112      	bne.n	80022ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2200      	movs	r2, #0
 800228e:	2180      	movs	r1, #128	@ 0x80
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff fee1 	bl	8002058 <SPI_WaitFlagStateUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d016      	beq.n	80022ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e00f      	b.n	80022cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c2:	2b80      	cmp	r3, #128	@ 0x80
 80022c4:	d0f2      	beq.n	80022ac <SPI_EndRxTxTransaction+0x78>
 80022c6:	e000      	b.n	80022ca <SPI_EndRxTxTransaction+0x96>
        break;
 80022c8:	bf00      	nop
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000000 	.word	0x20000000
 80022d8:	165e9f81 	.word	0x165e9f81

080022dc <memset>:
 80022dc:	4402      	add	r2, r0
 80022de:	4603      	mov	r3, r0
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d100      	bne.n	80022e6 <memset+0xa>
 80022e4:	4770      	bx	lr
 80022e6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ea:	e7f9      	b.n	80022e0 <memset+0x4>

080022ec <__libc_init_array>:
 80022ec:	b570      	push	{r4, r5, r6, lr}
 80022ee:	4d0d      	ldr	r5, [pc, #52]	@ (8002324 <__libc_init_array+0x38>)
 80022f0:	4c0d      	ldr	r4, [pc, #52]	@ (8002328 <__libc_init_array+0x3c>)
 80022f2:	1b64      	subs	r4, r4, r5
 80022f4:	10a4      	asrs	r4, r4, #2
 80022f6:	2600      	movs	r6, #0
 80022f8:	42a6      	cmp	r6, r4
 80022fa:	d109      	bne.n	8002310 <__libc_init_array+0x24>
 80022fc:	4d0b      	ldr	r5, [pc, #44]	@ (800232c <__libc_init_array+0x40>)
 80022fe:	4c0c      	ldr	r4, [pc, #48]	@ (8002330 <__libc_init_array+0x44>)
 8002300:	f000 f818 	bl	8002334 <_init>
 8002304:	1b64      	subs	r4, r4, r5
 8002306:	10a4      	asrs	r4, r4, #2
 8002308:	2600      	movs	r6, #0
 800230a:	42a6      	cmp	r6, r4
 800230c:	d105      	bne.n	800231a <__libc_init_array+0x2e>
 800230e:	bd70      	pop	{r4, r5, r6, pc}
 8002310:	f855 3b04 	ldr.w	r3, [r5], #4
 8002314:	4798      	blx	r3
 8002316:	3601      	adds	r6, #1
 8002318:	e7ee      	b.n	80022f8 <__libc_init_array+0xc>
 800231a:	f855 3b04 	ldr.w	r3, [r5], #4
 800231e:	4798      	blx	r3
 8002320:	3601      	adds	r6, #1
 8002322:	e7f2      	b.n	800230a <__libc_init_array+0x1e>
 8002324:	08002364 	.word	0x08002364
 8002328:	08002364 	.word	0x08002364
 800232c:	08002364 	.word	0x08002364
 8002330:	08002368 	.word	0x08002368

08002334 <_init>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	bf00      	nop
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr

08002340 <_fini>:
 8002340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002342:	bf00      	nop
 8002344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002346:	bc08      	pop	{r3}
 8002348:	469e      	mov	lr, r3
 800234a:	4770      	bx	lr
